# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Description: >
    Amazon Connect - Get Queue Info Template
    This AWS CloudFormation Template will return Amazon Connect Queue (Name, ARN, Id) for a provided Queue Name.
Metadata:
  Author: "Taylan Unal <taylauna@amazon.com>"
  Version: "2023-03-21"

Parameters:
  AmazonConnectInstanceARN:
    Type: String
    Description: Enter your Amazon Connect Instance ARN - To find your Instance ARN, visit https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html
    Default: arn:aws:connect:REGION:ACCOUNTID:instance/INSTANCEID

  QueueName:
    Type: String
    Description: Enter your Amazon Connect Queue Name (ex. BasicQueue) - To find your Queue Name, visit https://docs.aws.amazon.com/connect/latest/adminguide/create-queue.html
    Default: "BasicQueue"

Outputs:
  QueueName:
    Description: Amazon Connect Queue Name
    Value: !GetAtt InvokeGetQueueInfoFunction.QueueName
  QueueArn:
    Description: Amazon Connect Queue Arn
    Value: !GetAtt InvokeGetQueueInfoFunction.QueueArn
  QueueId:
    Description: Amazon Connect Queue Id
    Value: !GetAtt InvokeGetQueueInfoFunction.QueueId

Resources:
# ****
# Section 0: Retrieve Queue Info (Custom Resource)
# AWS Lambda - CloudFormation Documentation: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
# Required Parameters: AmazonConnectInstanceARN, QueueName
# ****
  # Custom Resource - Execute GetQueueInfo Function
  InvokeGetQueueInfoFunction:
    Type: Custom::GetQueueInfoFunction
    Properties:
      ServiceToken: !GetAtt GetQueueInfoFunction.Arn
      AmazonConnectInstanceARN: !Ref AmazonConnectInstanceARN
      QueueName: !Ref QueueName

  GetQueueInfoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GetQueueInfoPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Sid: "DescribeConnectStatement"
                Action:
                  - connect:DescribeQueue
                Resource: # Describe Operations require instance/[RESOURCE]/* level access
                  - !Sub "${AmazonConnectInstanceARN}/queue/*"
              - Effect: Allow
                Sid: "SearchConnectStatement"
                Action:
                  - connect:SearchQueues
                Resource: # List/Search Operations require Resource: instance/* level access
                  - !Sub "${AmazonConnectInstanceARN}" # Full instance required for Routing Profiles and SecurityProfiles
                  - !Sub "${AmazonConnectInstanceARN}/*" # '/*' required for Queues and Hours of Operation

  GetQueueInfoFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Sub 
        - 'GetQueueInfo-${UUID}'
        - UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Description: 'GetQueueInfo: Returns Amazon Connect Queue attributes'
      Runtime: python3.12
      Handler: index.lambda_handler
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Architectures: # x86_64 | arm64
        - arm64
      Role: !GetAtt GetQueueInfoRole.Arn
      MemorySize: 256
      Timeout: 15
      Code:
        ZipFile: |
          # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          # SPDX-License-Identifier: MIT-0
          # Description: (v2024.03.19) This AWS Lambda Custom Resource function will return attributes of a specified Amazon Connect Queue.
          import cfnresponse
          import json
          import logging
          import boto3

          # Initialize global variables
          logger = logging.getLogger()
          logger.setLevel("INFO")
          connect_client = boto3.client('connect')

          def lambda_handler(event, context):
              logger.info("Received event: %s", json.dumps(event))
              request_type = event.get('RequestType')

              if request_type in ('Create', 'Update'):
                  instance_arn = event['ResourceProperties']['AmazonConnectInstanceARN']
                  instance_id = instance_arn.split('/')[-1]
                  queue_name = event['ResourceProperties']['QueueName']

                  # Search Amazon Connect Queues with exact match for name field. (https://docs.aws.amazon.com/connect/latest/APIReference/API_SearchQueues.html)
                  response = connect_client.search_queues(
                      InstanceId=instance_id,
                      SearchCriteria={
                          'StringCondition': {
                              'FieldName': 'name',
                              'Value': queue_name,
                              'ComparisonType': 'EXACT'
                          },
                      }
                  )

                  queues = response.get("Queues", [])
                  if not queues:
                      logger.info(f"Queue with name {queue_name} was not found.")
                      return None

                  # Return the first queue in the list of Queues returned by the SearchQueues API.
                  queue_info = queues[0]
                  logger.info("Queue Found: %s", queue_info)
                  response_data = {
                      "QueueName": queue_info.get("Name") or "None",
                      "QueueArn": queue_info.get("QueueArn"),
                      "QueueId": queue_info.get("QueueId"),
                  }
              elif request_type == 'Delete':
                  response_data = {}
              else:
                  raise ValueError(f'Unsupported RequestType: {request_type}')

              # Send CFN Response and return ResponseData
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              return response_data